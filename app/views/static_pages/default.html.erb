<script type="text/javascript">
 /* Timer */
 var _st = null;
 // Window width & height
 var width;
 var height;
 // Current coordinates
 var coords = null;
 // Ajax
 var ajax = new Ajax();

 // points
 var points = new Array();
 var found = new Array();

 function deg2str(deg)
 {
	 var a;
	 var b;
	 var c;
	 var str;
	 
	 a = deg;
	 if ( deg > 0 ) {
		 b = (a - parseInt(a)) * 60;
	 } else {
		 b = (parseInt(a) - a) * 60;
	 }
	 c = (b - parseInt(b)) * 60;
	 str = parseInt(a)+"°"+parseInt(b)+"'"+parseInt(c)+"''";

	 return str;
 }
 
 function updatePoints()
 {
	 var lamf = function(res) {
		 var restext = res.responseText;
		 if ( 200 == res.status ) {
			 var jsonobj = null;
			 if ( JSON && JSON.parse ) {
				 jsonobj = JSON.parse(restext);
			 } else {
				 jsonobj = eval('('+restext+')');
			 }
			 localStorage.setItem("points", restext);
			 points = jsonobj;
		 }
	 }
	 var req = '{}'+"\n";
   ajax.request(lamf, req, 'GET', "./points.json", false);
 }

 /*
	* Called when the location is updated
	*/
 function onLocationUpdate(pos)
 {
	 coords = pos.coords;

	 // Check within 10m
	 for ( var k in points ) {
		 var lat = coords.latitude - points[k].latitude;
		 var long = coords.longitude - points[k].longitude;
		 /* about 50m */
		 if ( lat < 0.0005 && lat > -0.0005
			 && long < 0.0005 && long > -0.0005 ) {
				 if ( found.indexOf(points[k].id.toString()) < 0 ) {
					 alert("Get " + points[k].name + "!");
					 found.push(points[k].id);
					 localStorage.setItem("found", found.join());
				 }
		 }
	 }

 }
 /*
	* Called when the location update is failed
	*/
 function onLocationUpdateError(error)
 {
	 switch ( error.code ) {
		 case error.POSITION_UNAVAILABLE:
			 alert("Geolocation is unavailable");
			 break;
		 case error.PERMISSION_DENIED:
			 alert("Geolocation: permission denied");
			 break;
		 case error.PERMISSION_DENIED_TIMEOUT:
			 alert("Geolocation: timeout");
			 break;
	 }
 }

 /*
	* Called when the compass is updated
	*/
 function onCompassUpdate(e)
 {
	 var alpha;
   // Check for iOS property
   if( e.webkitCompassHeading ) {
     alpha = event.webkitCompassHeading;
     //Rotation is reversed for iOS
   }
   // non iOS
   else {
     alpha = - event.alpha;
	 }
	 
   var heading = alpha;
   var res = document.getElementById("res");
   //var comp = document.getElementById("compass");
	 var comp = document.getElementById("canvas01");
   if ( heading < 0 ) {
		 heading += 360;
	 }
   //heading += window.orientation;
   //res.innerHTML = '方位 : ' + heading + '<br />精度 : ' + e.webkitCompassAccuracy;
   comp.style.webkitTransform = 'rotate(-'+(heading)+'deg)';
 }

 function onClickCanvas(x, y)
 {
	 var cx = width / 2;
	 var cy = height / 2;
	 var radius = cx > cy ? cy : cx;

	 if ( coords ) {
		 for ( var k in points ) {
			 var lat = coords.latitude - points[k].latitude;
			 var long = coords.longitude - points[k].longitude;

			 if ( found.indexOf(points[k].id.toString()) >= 0 ) {
				 continue;
			 }

			 if ( (cx + lat * radius - 20 < x && cx + lat * radius + 20 > x)
					 && (cy + long * radius - 20 < y && cy + long * radius + 20 > y) ) {
						 alert(points[k].description + "\n @ " + deg2str(points[k].longitude) + " / " + deg2str(points[k].latitude));
			 }
		 }
	 }
 }
 
 /*
	* Called when loaded
	*/
 window.addEventListener('load', function() {
	 /* Update points */
	 updatePoints();

	 /* Storage */
	 if ( typeof(Storage) !== "undefined" ) {
		 var jsonobj;
		 var str = localStorage.getItem("points");
		 if ( JSON && JSON.parse ) {
			 jsonobj = JSON.parse(str);
		 } else {
			 jsonobj = eval('('+str+')');
		 }
		 points = jsonobj;

		 str = localStorage.getItem("found");
		 if ( str ) {
			 found = str.split(",")
		 }
	 } else {
		 alert("Sorry, no Storage support found.");
	 }

	 /* Get window size and update the canvas */
   width = Window.getWindowSize().width;
   height = Window.getWindowSize().height;
	 $('canvas01').width = width;
   $('canvas01').height = height;
   //$('canvas01').style.backgroundColor = 'black';

	 $('canvas02').width = width;
   $('canvas02').height = height;
   $('canvas02').style.backgroundColor = 'black';

	 /* Add event listener to the canvas */
   $('canvas01').addEventListener('click', function(e){
     onClickCanvas(e.clientX, e.clientY);
	 }, false);

	 var opts = {
		 enableHighAccuracy: true,
		 timeout: 5000,
		 maximumAge: 0
	 };
   if ( navigator.geolocation ) {
		 /* Add event lister for geolocation */
		 navigator.geolocation.watchPosition(onLocationUpdate, onLocationUpdateError, opts);

		 /* Update once */
     navigator.geolocation.getCurrentPosition(
       function (pos) {
         coords = pos.coords;
       },
       function (error) {
         switch ( error.code ) {
           case error.POSITION_UNAVAILABLE:
             alert("Geolocation is unavailable");
             break;
           case error.PERMISSION_DENIED:
             alert("Geolocation: permission denied");
             break;
           case error.PERMISSION_DENIED_TIMEOUT:
             alert("Geolocation: timeout");
             break;
         }
       }
     );
   } else {
     alert("Geolocation API is not supported.");
   }
	 
	 /* Add event listener for compass */
	 if ( window.DeviceOrientationEvent ) {
		 window.addEventListener('deviceorientation', onCompassUpdate, false);
	 }

	 animation();
 }, false);

 /*
  * Draw the canvas
	*/
 function draw()
 {
	 var cx = width / 2;
	 var cy = height / 2;
	 var radius = cx > cy ? cy : cx;

	 var ctx = $('canvas01').getContext("2d");

	 // Circles
	 ctx.strokeStyle="rgba(0,255,0,0.7)";
	 ctx.lineWidth = 1;
	 var i;
	 for ( i = 0; i <= 10; i++ ) {
		 ctx.beginPath();
		 ctx.arc(cx,cy,radius * 0.1 * i,0,Math.PI*2,true);
		 ctx.closePath();
		 ctx.stroke();
	 }

	 ctx.strokeStyle="rgba(0,255,0,0.6)";
	 ctx.lineWidth = 1;
	 for ( i = 0; i < 12; i++ ) {
		 
		 ctx.beginPath();
		 ctx.moveTo(cx, cy);
		 ctx.lineTo(cx + radius * Math.cos(Math.PI / 6 * i),
								cy + radius * Math.sin(Math.PI / 6 * i));
		 ctx.closePath();
		 ctx.stroke();
	 }

	 var ctx = $('canvas02').getContext("2d");
	 // Text
	 ctx.fillStyle="rgba(0,255,0,1.0)";
	 //ctx.font="10pt Monaco";
	 ctx.font="10pt Verdana";
	 if ( coords ) {
		 var a;
		 var b;
		 var c;
		 var str = "";

		 a = coords.longitude;
		 if ( coords.longitude > 0 ) {
			 b = (a - parseInt(a)) * 60;
		 } else {
			 b = (parseInt(a) - a) * 60;
		 }
		 c = (b - parseInt(b)) * 60;
		 str += parseInt(a)+"°"+parseInt(b)+"'"+parseInt(c)+"''";
		 str += "/";
		 a = coords.latitude;
		 if ( coords.latitude > 0 ) {
			 b = (a - parseInt(a)) * 60;
		 } else {
			 b = (parseInt(a) - a) * 60;
		 }
		 c = (b - parseInt(b)) * 60;
		 str += parseInt(a)+"°"+parseInt(b)+"'"+parseInt(c)+"''";
		 //coords.latitude + " / " + coords.longitude
		 ctx.fillText(str,cx,cy);
	 }
 }

 /*
	* Animation
	*/
 var savedr = 0;
 function animation()
 {
	 var ctx = $('canvas01').getContext("2d");
	 var ctx2 = $('canvas02').getContext("2d");
	 savedr = savedr % 20;
	 savedr += 2;
	 if ( savedr == 2 ) {
		 ctx.clearRect(0, 0, width, height);
		 ctx2.clearRect(0, 0, width, height);
		 draw();
	 }

	 ctx.strokeStyle="rgba(255,0,0,0.2)";
	 ctx.fillStyle="rgba(255,0,0,0.1)";
	 ctx.lineWidth = 3;

	 var cx = width / 2;
	 var cy = height / 2;
	 var radius = cx > cy ? cy : cx;
	 var numpoints = 0;

	 if ( coords ) {
		 for ( var k in points ) {
			 var lat = coords.latitude - points[k].latitude;
			 var long = coords.longitude - points[k].longitude;
			 /* about 1km */
			 if ( lat < 0.01 && lat > -0.01
				 && long < 0.01 && long > -0.01 ) {
					 if ( found.indexOf(points[k].id.toString()) < 0 ) {
						 ctx.beginPath();
						 ctx.arc(cx + lat * radius * 100, cy + long * radius * 100, savedr,0,Math.PI*2,true);
						 ctx.closePath();
						 ctx.stroke();
						 ctx.fill();
					 }
			 }
		 }
	 }

	 if ( savedr == 2 ) {
		 var numpoints = 0;
		 if ( coords ) {
			 for ( var k in points ) {
				 var lat = coords.latitude - points[k].latitude;
				 var long = coords.longitude - points[k].longitude;
				 /* about 1km */
				 if ( lat < 0.01 && lat > -0.01
					 && long < 0.01 && long > -0.01 ) {
						 if ( found.indexOf(points[k].id.toString()) < 0 ) {
							 ctx.fillStyle="rgba(255,255,255,1.0)";
							 ctx.font="8pt Verdana";
							 ctx.fillText(points[k].name, cx + lat * radius * 100 + 10, cy + long * radius * 100 + 10);
							 numpoints++;
						 }
				 }
			 }
		 }

		 var ctx = $('canvas02').getContext("2d");
		 ctx.fillStyle="rgba(255,0,0,1.0)";
		 ctx.font="9pt Verdana";
		 ctx.fillText(numpoints + " spots", width - 100, height - 60);
		 ctx.fillText("     in 1 km", width - 100, height - 45);
	 }

	 /* Schedule next frame shot */
	 _st = setTimeout("animation()", 50);
 }
</script>
<canvas id="canvas02" width="100" height="600" style="margin:0;padding:0;position:absolute;left0;top:0;"></canvas>
<canvas id="canvas01" width="100" height="600" style="margin:0;padding:0;position:absolute;left0;top:0;"></canvas>
<!-- <div id="res"></div>-->
